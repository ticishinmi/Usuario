unit UFuncao;

interface

Uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls,
  Forms, Dialogs, Menus, ExtCtrls, ComCtrls, DateUtils, IniFiles,
  FireDAC.Comp.Client, StdCtrls, Vcl.Buttons,
  DBClient, Vcl.DBCtrls, DB, Vcl.DBGrids;

procedure CriarForm(var varForm; varInstance: TFormClass; varParam: String);
function ValidarAcessoForm(AForm: TForm): Boolean;
procedure AbrirDestruirForm(var varForm; varInstance: TFormClass);
procedure DestruirForm(var varForm: TForm);
function GetBuildInfo: string;
function GerarPK(varCampo, varTabela: String): Integer;
function ExecAndWait(const FileName, Params: string;
  const WindowState: Word): Boolean;
function CrySenha(Snh: String): String;
function RetornaAcesso(varCodUser, varCampo: String): String;
procedure ValidaAcesso(varCodUser, varCampo: String);
function AbrirPesquisaCad(varCampoPadrao, varCampoCod, varCampoStatus,
  varTabela, varDescricao, varSQL: string; varQueryPesq: TClientDataSet;
  Conexao: TFDCustomConnection): string;
function RetornaCalculado(varTabela, varChave, varCampo, varValorComparar,
  varJoin, varAND: String): String;
function ValidaCPF(Num: string): Boolean;
function ValidaCNPJ(Num: string): Boolean;
procedure ValidaVazia(varClient: TClientDataSet; varMsg: String);
procedure ValidarCamposObrigatorios(const aQuery: TClientDataSet;
  varForm: TForm);
function PreencherCaracteresEsquerda(Texto, Tipo: String;
  Tamanho: Integer): String;
procedure ControlaPainel(varVisible: Boolean; varPainel: TPanel);
function BuscarString(varCampo, varTabela, varChave, varValorChave
  : String): String;
function ArredondamentoDec(fValor: Currency; fDecimal: Integer): Currency;
function GerarID(varGenerator: String): string;
function ValidaNumeros(varKey: char): char;
function ValidaNumerosSemVirgula(varKey: char): char;
procedure AbrirConfGradeCDS(varDescricao: String; Query: TClientDataSet;
  Grid: TDBGrid; Conexao: TFDCustomConnection);
procedure AbrirConfGrade(varDescricao: String; Query: TFDQuery; Grid: TDBGrid);
procedure CarregarConfGrade(varDescricao: String; Query: TFDQuery;
  Grid: TDBGrid);
procedure ifThenAbort(Cond: Boolean; Mns: String = ''; CampoFocu: TObject = Nil;
  tipoMns: TMsgDlgType = mtInformation; aQuClose: TFDQuery = Nil);
procedure ExecCons(aQuery: TFDQuery; aSql: String);
procedure TrataException(msg: string);
function CloseAllClientDataSet(ADm: TDataModule): Boolean;
procedure Focar(campo: TWinControl);
procedure MouseLeaveSetColor(Sender: TObject);
procedure MouseMoveSetColor(Sender: TObject);
procedure SetMascaraTelefone(varField: String; Query: TClientDataSet);
procedure LimparMascaraTelefone(varField: String; Query: TClientDataSet);
procedure OcultarSheets(PageControl: TPageControl);
procedure ControlarEstadoBotoes(AForm: TForm; ATabela: TClientDataSet;
  ATag: Integer);

var
  CaminhoEXE: String;
  ArqIni: tIniFile;
  varTecla: char;
  pgGeral: TPageControl;

implementation

uses UPesquisaIBO, UConfGrade, UDM, UPesquisaRETIBO, UPrinc;

procedure TrataException(msg: string);
var
  Mensagem: string;
  Pos1, Pos2: Integer;
begin
  if Pos(UpperCase('is not a valid date'), UpperCase(msg)) <> 0 then
  begin
    Mensagem := 'Data inválida!';
  end
  else
  if Pos(UpperCase('key violation'), UpperCase(msg)) <> 0 then
  begin
    Mensagem := 'Houve violação de chave!' + #13 + 'Registro já incluido.';
    MessageDlg(Mensagem, mtInformation, [mbOk], 0);
  end
  else
  if Pos(UpperCase('Input value'), UpperCase(msg)) <> 0 then
    Mensagem := 'Campo preenchido com valor não válido!' + #13 +
      'Proceda a correção.'
  else
  if Pos(UpperCase('is not a valid time'), UpperCase(msg)) <> 0 then
    Mensagem := 'Hora inválida, proceda a correção.'
  else
  if Pos(UpperCase('Erro ApplyUpdates'), UpperCase(msg)) <> 0 then
    Mensagem := 'Não foi possível salvar a modificação no banco de dados.'
  else
  if Pos(UpperCase('is not a valid float'), UpperCase(msg)) <> 0 then
  begin
    Pos1 := Pos('''', msg);
    Mensagem := msg;
    Delete(Mensagem, Pos1, 1);
    Pos2 := Pos('''', Mensagem);
    Mensagem := Copy(msg, Pos1 + 1, Pos2 - Pos1);
    Mensagem := 'O valor  ' + Mensagem + ' não é válido.';
  end
  else
  if Pos(UpperCase('field value required'), UpperCase(msg)) <> 0 then
  begin
    Pos1 := Pos('column ', msg) + 7;
    Pos2 := Pos(',', msg);
    Mensagem := Copy(msg, Pos1, Pos2 - Pos1);
    Mensagem := 'Campo ' + Mensagem + ' deve ser preenchido.';
  end
  else
  if Pos(UpperCase('FOREIGN KEY'), UpperCase(msg)) <> 0 then
    Mensagem := 'Operação não permitida!' + #13 +
      'Registro vinculado em outra tabela.'
  else
  if (Pos(UpperCase('PRIMARY or UNIQUE KEY'), UpperCase(msg)) > 0) or ((Pos(UpperCase('KEY VIOLATION'), UpperCase(msg)) > 0)) then
    Mensagem := 'Você está tentando gravar uma informação que já existe no banco de dados!'
  else
    Mensagem := 'Ocorreu um erro ao tentar gravar o registro! #13 Error: ' + msg;

  MessageBox(Application.Handle, PChar(Mensagem), 'Validação',
    mb_ok + MB_ICONERROR);
end;

procedure ExecCons(aQuery: TFDQuery; aSql: String);
begin
  With aQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add(aSql);
    Prepare;
    Open;
  end;
end;

procedure ifThenAbort(Cond: Boolean; Mns: String; CampoFocu: TObject;
  tipoMns: TMsgDlgType; aQuClose: TFDQuery);
begin
  if Cond then
  begin
    if Trim(Mns) <> '' then
      MessageDlg(Mns, tipoMns, [mbOk], 0);

    if aQuClose <> Nil then
      aQuClose.Close;

    if (CampoFocu <> Nil) and (CampoFocu is TWinControl) then
      Try
        (CampoFocu as TWinControl).SetFocus;
      Except
        Abort;
      end;
    Abort;
  end;
end;

procedure CarregarConfGrade(varDescricao: String; Query: TFDQuery;
  Grid: TDBGrid);
var
  cont, x: Integer;
  caminho: String;
begin
  cont := 0;
  caminho := ExtractFilePath(Application.ExeName);
  If not DirectoryExists(caminho + 'config') then
    CreateDir(caminho + 'config');

  If FileExists(caminho + '/config/' + varDescricao + '.afa') then
    Grid.Columns.LoadFromFile(caminho + '/config/' + varDescricao + '.afa');

  for x := 0 To Query.FieldCount - 1 Do
  begin
    If (Query.Fields[x].FieldKind = fkData) and
      (Query.Fields[x].IsBlob = False) Then
    begin
      Grid.Columns.Add;
      Grid.Columns[cont].FieldName := Query.Fields[x].FieldName;
      Grid.Columns[cont].Title.Caption := Query.Fields[x].DisplayLabel;
      cont := cont + 1;
    end;
  end;
end;

procedure AbrirConfGradeCDS(varDescricao: String; Query: TClientDataSet;
  Grid: TDBGrid; Conexao: TFDCustomConnection);
var
  x, y: Integer;
  caminho: String;
begin
  Application.CreateForm(TFConfGrade, FConfGrade);
  FConfGrade.Descricao := varDescricao;

  if Query.Active = False then
  begin
    MessageDlg('Execute a consulta para configurar a grade!', mtInformation,
      [mbOk], 0);
    Abort;
  end;

  FConfGrade.DsGrade.DataSet := Query;

  FConfGrade.ShowModal;
  caminho := ExtractFilePath(Application.ExeName);
  If FileExists(caminho + '\config\' + varDescricao + '.afa') then
    Grid.Columns.LoadFromFile(caminho + '\config\' + varDescricao + '.afa');

  FConfGrade := nil;
end;

procedure AbrirConfGrade(varDescricao: String; Query: TFDQuery; Grid: TDBGrid);
var
  x, y: Integer;
  caminho: String;
begin
  Application.CreateForm(TFConfGrade, FConfGrade);
  FConfGrade.Descricao := varDescricao;
  FConfGrade.DsGrade.DataSet := Query;

  if Query.Active = False then
  begin
    MessageDlg('Execute a consulta para configurar a grade!', mtInformation,
      [mbOk], 0);
    Abort;
  end;
  FConfGrade.ShowModal;

  caminho := ExtractFilePath(Application.ExeName);
  If FileExists(caminho + '\config\' + varDescricao + '.afa') then
    Grid.Columns.LoadFromFile(caminho + '\config\' + varDescricao + '.afa');

  FConfGrade := nil;
end;

function ValidaNumeros(varKey: char): char;
begin
  If not(varKey in ['0' .. '9', #08, #44, #46]) then
    Result := #0
  else
  begin
    if varKey = #46 then
      varKey := #44;
    Result := varKey;
  end;
end;

function ValidaNumerosSemVirgula(varKey: char): char;
begin
  If not(varKey in ['0' .. '9', #08]) then
    Result := #0
  else
  begin
    Result := varKey;
  end;
end;

function GerarID(varGenerator: String): string;
begin
  with DM.QuGerarID do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select Gen_ID (' + varGenerator + ',1) from RDB$DataBase');
    Open;
    Result := Fields[0].AsString;
  end;
end;

function ArredondamentoDec(fValor: Currency; fDecimal: Integer): Currency;
var
  aValor, aux: String;
  i: Integer;
begin
  Result := 0;
  aux := '0.';
  for i := 1 to fDecimal do
    aux := aux + '0';

  aValor := FormatFloat(aux, fValor);
  Result := StrToFloat(aValor);
end;

function BuscarString(varCampo, varTabela, varChave, varValorChave
  : String): String;
begin
  with DM.QuBuscarString do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select ' + varCampo + ' from ' + varTabela + ' where ' + varChave +
      ' = ' + #39 + varValorChave + #39);
    Open;
    Result := Fields[0].AsString;
  end;
end;

procedure ControlaPainel(varVisible: Boolean; varPainel: TPanel);
begin
  varPainel.Visible := varVisible;
end;

procedure ValidaVazia(varClient: TClientDataSet; varMsg: String);
begin
  if varClient.RecordCount = 0 then
  begin
    MessageDlg(varMsg, mtInformation, [mbOk], 0);
    Abort;
  end;
end;

function ValidaCNPJ(Num: string): Boolean;
var
  n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12: Integer;
  d1, d2: Integer;
  digitado, calculado: string;
begin
  Num := Trim(Num);
  if Length(Num) = 0 then
    Result := true
  else if Length(Num) <> 14 then
    Result := False
  else if (Num = '00000000000000') or (Num = '11111111111111') or
    (Num = '22222222222222') or (Num = '33333333333333') or
    (Num = '44444444444444') or (Num = '55555555555555') or
    (Num = '66666666666666') or (Num = '77777777777777') or
    (Num = '88888888888888') or (Num = '99999999999999') then
    Result := False
  else
  begin
    n1 := StrToInt(Num[1]);
    n2 := StrToInt(Num[2]);
    n3 := StrToInt(Num[3]);
    n4 := StrToInt(Num[4]);
    n5 := StrToInt(Num[5]);
    n6 := StrToInt(Num[6]);
    n7 := StrToInt(Num[7]);
    n8 := StrToInt(Num[8]);
    n9 := StrToInt(Num[9]);
    n10 := StrToInt(Num[10]);
    n11 := StrToInt(Num[11]);
    n12 := StrToInt(Num[12]);
    d1 := n12 * 2 + n11 * 3 + n10 * 4 + n9 * 5 + n8 * 6 + n7 * 7 + n6 * 8 + n5 *
      9 + n4 * 2 + n3 * 3 + n2 * 4 + n1 * 5;
    d1 := 11 - (d1 mod 11);
    if d1 >= 10 then
      d1 := 0;
    d2 := d1 * 2 + n12 * 3 + n11 * 4 + n10 * 5 + n9 * 6 + n8 * 7 + n7 * 8 + n6 *
      9 + n5 * 2 + n4 * 3 + n3 * 4 + n2 * 5 + n1 * 6;
    d2 := 11 - (d2 mod 11);
    if d2 >= 10 then
      d2 := 0;
    calculado := inttostr(d1) + inttostr(d2);
    digitado := Num[13] + Num[14];
    if calculado <> digitado then
      Result := False
    else
      Result := true;
  end;
end;

function ValidaCPF(Num: string): Boolean;
var
  n1, n2, n3, n4, n5, n6, n7, n8, n9: integer;
  d1, d2: integer;
  digitado, calculado: string;
begin
  num := (trim(num));
  num := StringReplace(num,' ','',[rfReplaceAll]);

  if Length(num) = 0 then
    Result := True
  else
  if Length(num) <> 11 then
    Result := False
  else
  if (num = '00000000000') or
    (num = '11111111111') or
    (num = '22222222222') or
    (num = '33333333333') or
    (num = '44444444444') or
    (num = '55555555555') or
    (num = '66666666666') or
    (num = '77777777777') or
    (num = '88888888888') or
    (num = '99999999999') then
    Result := False
  else
  begin
    n1 := StrToInt(num[1]);
    n2 := StrToInt(num[2]);
    n3 := StrToInt(num[3]);
    n4 := StrToInt(num[4]);
    n5 := StrToInt(num[5]);
    n6 := StrToInt(num[6]);
    n7 := StrToInt(num[7]);
    n8 := StrToInt(num[8]);
    n9 := StrToInt(num[9]);
    d1 := n9 * 2 + n8 * 3 + n7 * 4 + n6 * 5 + n5 * 6 + n4 * 7 + n3 * 8 + n2 * 9 + n1 * 10;
    d1 := 11 - (d1 mod 11);
    if d1 >= 10 then
      d1 := 0;
    d2 := d1 * 2 + n9 * 3 + n8 * 4 + n7 * 5 + n6 * 6 + n5 * 7 + n4 * 8 + n3 * 9 + n2 * 10 + n1 * 11;
    d2 := 11 - (d2 mod 11);
    if d2 >= 10 then
      d2 := 0;
    calculado := inttostr(d1) + inttostr(d2);
    digitado := num[10] + num[11];
    if calculado <> digitado then
      Result := False
    else
      Result := True;
  end;
end;

function AbrirPesquisaCad(varCampoPadrao, varCampoCod, varCampoStatus,
  varTabela, varDescricao, varSQL: string; varQueryPesq: TClientDataSet;
  Conexao: TFDCustomConnection): string;
begin
  CriarForm(FPesquisaRETIBO, TFPesquisaRETIBO, '');
  FPesquisaRETIBO.Query                  := varQueryPesq;
  FPesquisaRETIBO.CampoPadrao            := varCampoPadrao;
  FPesquisaRETIBO.EdCons.Text            := varTecla;
  FPesquisaRETIBO.Chave                  := varCampoCod;
  FPesquisaRETIBO.LabCampoStatus.Caption := varCampoStatus;
  FPesquisaRETIBO.QuConsulta.Connection  := Conexao;
  FPesquisaRETIBO.NomeTabela             := varTabela;
  FPesquisaRETIBO.Descricao              := varDescricao;
  FPesquisaRETIBO.SQLPersonalizado       := varSQL;
  FPesquisaRETIBO.ShowModal;

  if (FPesquisaRETIBO.CodRet <> '') then
  begin
    Result := FPesquisaRETIBO.CodRet;
  end
  else
  begin
    Result := '';
  end;
  DestruirForm(TForm(FPesquisaRETIBO));
  varTecla := #8;
end;

function RetornaCalculado(varTabela, varChave, varCampo, varValorComparar,
  varJoin, varAND: String): String;
begin
  with DM.QuBuscaCalcFields do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select * from RetornaCalculado ( ' + QuotedStr(varTabela) + ',' +
      QuotedStr(varChave) + ',' + QuotedStr(varCampo) + ',' +
      QuotedStr(varValorComparar) + ',' + QuotedStr(varJoin) + ',' +
      QuotedStr(varAND) + ')');
    Open;
    Result := Fields[0].AsString;
  end;
end;

procedure ValidaAcesso(varCodUser, varCampo: String);
begin
  if RetornaAcesso(varCodUser, varCampo) = 'SEM ACESSO' then
  begin
    MessageDlg('Usuário sem permissão!', mtInformation, [mbOk], 0);
    Abort;
  end;
end;

function RetornaAcesso(varCodUser, varCampo: String): String;
begin
  with DM.QuBusca do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select a.' + varCampo + ' from perfil a, usuario b');
    SQL.Add('where a.codperfil = b.codperfil');
    SQL.Add('and b.codusuario = ' + #39 + varCodUser + #39);
    Open;
    Result := Fields[0].AsString;
  end;
end;

function CrySenha(Snh: String): String;
var
  i: Integer;
begin
  for i := 1 to Length(Snh) do
    Result := Result + Chr((Ord(Snh[i]) + 57));
end;

function ExecAndWait(const FileName, Params: string;
  const WindowState: Word): Boolean;
var
  SUInfo: TStartupInfo;
  ProcInfo: TProcessInformation;
  CmdLine: string;
begin
  { Coloca o nome do arquivo entre aspas. Isto é necessário devido aos espaços contidos em nomes longos }
  CmdLine := '"' + FileName + '" ' + Params;
  FillChar(SUInfo, SizeOf(SUInfo), #0);
  with SUInfo do
  begin
    cb := SizeOf(SUInfo);
    dwFlags := STARTF_USESHOWWINDOW;
    wShowWindow := WindowState;
  end;
  Result := CreateProcess(nil, PChar(CmdLine), nil, nil, False,
    CREATE_NEW_CONSOLE or NORMAL_PRIORITY_CLASS, nil,
    PChar(ExtractFilePath(FileName)), SUInfo, ProcInfo);
  { Aguarda até ser finalizado }
  if Result then
  begin
    WaitForSingleObject(ProcInfo.hProcess, INFINITE);
    { Libera os Handles }
    CloseHandle(ProcInfo.hProcess);
    CloseHandle(ProcInfo.hThread);
  end;
end;

function ValidarAcessoForm(AForm: TForm): Boolean;
begin
  Result := False;
  With DM.QuBusca do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT A.codperfil, C.nometela, B.visualizar FROM usuario A ' +
      'INNER JOIN itperfil B ON A.codperfil = B.codperfil ' +
      'inner join tela c on b.codtela = c.codtela ' + 'WHERE A.nomeuser = ' +
      QuotedStr(FPrinc.Usuario) + ' AND c.nometela = ' +
      QuotedStr(UpperCase(AForm.Name)));
    Open;

    if Fields[2].AsInteger = 0 then
    begin
      MessageDlg('Acesso não permitido!', mtWarning, [mbOk], 0);
      Result := true;
    end;
  end;
end;

procedure AbrirDestruirForm(var varForm; varInstance: TFormClass);
begin
  CriarForm(varForm, varInstance, '');
  TForm(varForm).ShowModal;
  DestruirForm(TForm(varForm));
end;

procedure DestruirForm(var varForm: TForm);
begin
  varForm.Free;
  varForm := nil;
end;

procedure CriarForm(var varForm; varInstance: TFormClass; varParam: String);
var
  varObjeto: TObject;
begin
  If TForm(varForm) <> nil then
  begin
    MessageDlg('Não é possível visualizar a Janela. Ela já está aberta!',
      mtError, [mbOk], 0);
    Abort;
  end;

  Application.CreateForm(varInstance, varForm);

  varObjeto := TForm(varForm).FindComponent('StatusBar1');
  If varObjeto <> nil then
    TStatusBar(varObjeto).Panels[0].Text := 'ID: ' +
      UpperCase(TForm(varForm).Name);

  If varParam <> '' then
    TForm(varForm).Caption := varParam;
end;

function GerarPK(varCampo, varTabela: String): Integer;
begin
  with DM.QuBusca do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select max(' + varCampo + ') from ' + varTabela);
    Open;
    Result := Fields[0].AsInteger + 1;
  end;
end;


function GetBuildInfo:string;
var
  VerInfoSize: DWORD;
  VerInfo: Pointer;
  VerValueSize: DWORD;
  VerValue: PVSFixedFileInfo;
  Dummy: DWORD;
  V1, V2, V3, V4: Word;
  Prog : string;
begin
  Prog        := Application.Exename;
  VerInfoSize := GetFileVersionInfoSize(PChar(prog), Dummy);
  GetMem(VerInfo, VerInfoSize);
  GetFileVersionInfo(PChar(prog), 0, VerInfoSize, VerInfo);
  VerQueryValue(VerInfo, '\', Pointer(VerValue), VerValueSize);
  with VerValue^ do
  begin
    V1 := dwFileVersionMS shr 16;
    V2 := dwFileVersionMS and $FFFF;
    V3 := dwFileVersionLS shr 16;
    V4 := dwFileVersionLS and $FFFF;
  end;
  FreeMem(VerInfo, VerInfoSize);
  result := Copy (InttoStr(100 + v1), 3, 2) + '.' +
  Copy (InttoStr(100 + v2), 2, 2) + '.' +
  Copy (InttoStr(100 + v3), 2, 2);{ + '.' +
  Copy (InttoStr(100 + v4), 2, 2);}
end;

procedure ValidarCamposObrigatorios(const aQuery: TClientDataSet;
  varForm: TForm);
  procedure PorFoco(campo: TWinControl);
  begin
    if campo.CanFocus then
      campo.SetFocus;
  end;

var
  i, x: Integer;
begin
  For i := 0 to aQuery.FieldCount - 1 do
  begin
    if (aQuery.Fields[i].Required) and (aQuery.Fields[i].AsString = '') then
    begin
      For x := 0 to varForm.ComponentCount - 1 do
        if (varForm.Components[x] is TDbEdit) then
        begin
          if TDbEdit(varForm.Components[x]).Field.FieldName = aQuery.Fields[i].FieldName
          then
            PorFoco(TDbEdit(varForm.Components[x]));
        end
        else if (varForm.Components[x] is TDBComboBox) then
        begin
          if TDBComboBox(varForm.Components[x]).Field.FieldName = aQuery.Fields
            [i].FieldName then
            PorFoco(TDBComboBox(varForm.Components[x]));
        end
        else if (varForm.Components[x] is TDBLookupComboBox) then
        begin
          if TDBLookupComboBox(varForm.Components[x])
            .Field.FieldName = aQuery.Fields[i].FieldName then
            PorFoco(TDBLookupComboBox(varForm.Components[x]));
        end;
      MessageDlg('O Campo "' + aQuery.Fields[i].DisplayLabel +
        '" deve ser preenchido!', mtInformation, [mbOk], 0);
      Abort;
    end;
  end;
end;

function PreencherCaracteresEsquerda(Texto, Tipo: String;
  Tamanho: Integer): String;
var
  TamanhoTeste: Integer;
  Numero: String;
begin
  TamanhoTeste := Length(Texto);
  Result := '';

  While TamanhoTeste < Tamanho do
  begin
    If Tipo = 'N' then
      Numero := '0' + Numero;

    If Tipo = 'X' then
      Texto := ' ' + Texto;

    If Tipo = '-' then
      Texto := '-' + Texto;

    If Tipo = '.' then
      Texto := '.' + Texto;

    TamanhoTeste := TamanhoTeste + 1;
  end;

  If Tipo = 'N' then
    Result := Numero + Texto;

  If ((Tipo = 'X') or (Tipo = '-')) or (Tipo = '.') then
    Result := Texto;
end;

function CloseAllClientDataSet(ADm: TDataModule): Boolean;
var
  i: Integer;
begin
  with ADm do
  begin
    for i := 0 to ComponentCount - 1 do
    begin
      if (Components[i] is TClientDataSet) then
      begin
        if TClientDataSet(Components[i]).Active = true then
          TClientDataSet(Components[i]).Active := False;
      end;

      if (Components[i] is TFDQuery) then
      begin
        if TFDQuery(Components[i]).Active = true then
          TFDQuery(Components[i]).Active := False;
      end;
    end;
  end;
end;

procedure Focar(campo: TWinControl);
begin
  if campo.CanFocus then
    campo.SetFocus;
end;

procedure MouseLeaveSetColor(Sender: TObject);
begin
  TLabel(Sender).Cursor := crDefault;
  TLabel(Sender).Font.Color := clBlue;
end;

procedure MouseMoveSetColor(Sender: TObject);
begin
  TLabel(Sender).Cursor := crHandPoint;
  TLabel(Sender).Font.Color := clPurple;
end;

procedure SetMascaraTelefone(varField: String; Query: TClientDataSet);
var
  varCont: Integer;
begin
  varCont := Length(Query.FieldByName(varField).AsString);

  if varCont = 11 then
    Query.FieldByName(varField).EditMask := '!\(99) 99999-9999;0; '
  else
    Query.FieldByName(varField).EditMask := '!\(99) 9999-9999;0; ';
end;

procedure LimparMascaraTelefone(varField: String; Query: TClientDataSet);
begin
  Query.FieldByName(varField).EditMask := ''
end;

procedure OcultarSheets(PageControl: TPageControl);
var
  iPage: Integer;
begin
  for iPage := 0 to PageControl.PageCount - 1 do
    PageControl.Pages[iPage].TabVisible := False;

  if (PageControl.PageCount > 0) then
    PageControl.ActivePage := PageControl.Pages[0];

  PageControl.Style := tsButtons;
end;


procedure ControlarEstadoBotoes(AForm: TForm; ATabela: TClientDataSet;
  ATag: Integer);
var
  i: Integer;
  ANovo, AAlterar, AExcluir: Integer;
begin
{  with DM.QuBusca do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT A.codperfil, C.nometela, B.novo, B.alterar, B.excluir FROM usuario A '
      + 'INNER JOIN itperfil B ON A.codperfil = B.codperfil ' +
      'inner join tela c on b.codtela = c.codtela ' + 'WHERE A.nomeuser = ' +
      QuotedStr(FPrinc.Usuario) + ' AND c.nometela = ' +
      QuotedStr(UpperCase(AForm.Name)));
    Open;

    if not(IsEmpty) then
    begin
      ANovo := Fields[2].AsInteger;
      AAlterar := Fields[3].AsInteger;
      AExcluir := Fields[4].AsInteger;
    end
    else
    begin

    end;
  end; }
      ANovo := 1;
      AAlterar := 1;
      AExcluir := 1;

  with AForm do
  begin
    for i := 0 to ComponentCount - 1 do
    begin
      if (Components[i] is TBitBtn) and
        (Copy(UpperCase(TBitBtn(Components[i]).Name), 1, 6) = UpperCase('btNovo')) and
        (TBitBtn(Components[i]).Tag = ATag) then
        TBitBtn(Components[i]).Enabled := (ANovo = 1);

      if (Components[i] is TBitBtn) and
        (Copy(UpperCase(TBitBtn(Components[i]).Name), 1, 9) = UpperCase('btAlterar')) and
        (TBitBtn(Components[i]).Tag = ATag) then
        TBitBtn(Components[i]).Enabled := (AAlterar = 1);

      if (Components[i] is TBitBtn) and
        (Copy(UpperCase(TBitBtn(Components[i]).Name), 1, 9)= UpperCase('btExcluir')) and
        (TBitBtn(Components[i]).Tag = ATag) then
        TBitBtn(Components[i]).Enabled := (AExcluir = 1);
    end;
    Repaint;
  end;
end;

end.
